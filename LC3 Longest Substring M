'''
Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
'''

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) < 1:
            return 0
        maxi = 1
        k = 0
        for i in range(len(s)):
            if s[i] in s[k: i]:
                k = k + s[k:].index(s[i]) + 1
            if maxi < len(s[k:i+1]):
                maxi = len(s[k:i+1])
        return maxi
        
'''
Runtime: 76 ms, faster than 41.31% of Python3 online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for Longest Substring Without Repeating Characters.
'''
